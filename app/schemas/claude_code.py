"""
Pydantic schemas for Claude Code API.

This module provides schemas for the Claude Code customization API,
including task tracking and result schemas.
"""

from typing import Dict, Any, List, Optional, Union
from pydantic import BaseModel, Field


class CustomizeResumeRequest(BaseModel):
    """
    Request model for resume customization.
    
    Attributes:
        resume_content: Full content of the resume in markdown format
        job_description: Full job description text
        user_id: Optional ID of the authenticated user
    """
    resume_content: str = Field(..., description="Resume content in markdown format")
    job_description: str = Field(..., description="Job description text")
    user_id: Optional[str] = Field(None, description="Optional user ID for authenticated users")


class CustomizedResumeResponse(BaseModel):
    """
    Response model for customized resume.
    
    Attributes:
        customized_resume: The customized resume content
        customization_summary: Summary of changes and explanations
        customization_id: Optional ID of the stored customization
        is_fallback: Whether this was generated by the fallback service
    """
    customized_resume: str = Field(..., description="Customized resume content")
    customization_summary: str = Field(..., description="Summary of changes and explanations")
    customization_id: Optional[str] = Field(None, description="ID of the stored customization")
    is_fallback: Optional[bool] = Field(None, description="Whether this was generated by the fallback service")


class QueuedTaskResponse(BaseModel):
    """
    Response model for a queued customization task.
    
    Attributes:
        task_id: Unique identifier for the task
        status: Current status of the task (e.g., "queued", "processing")
    """
    task_id: str = Field(..., description="Unique identifier for tracking the task")
    status: str = Field(..., description="Current status of the task")


class TaskStatusResponse(BaseModel):
    """
    Response model for task status requests.
    
    Attributes:
        task_id: Unique identifier for the task
        status: Current status of the task
        progress: Progress percentage (0-100)
        message: Human-readable status message
        result: Optional task result data (only present when status is "completed")
        error: Optional error message (only present when status is "error")
        logs: Optional list of log messages (only present if include_logs=True)
    """
    task_id: str = Field(..., description="Unique identifier for the task")
    status: str = Field(
        ..., 
        description="Current status (initializing, analyzing, planning, implementing, completed, error)"
    )
    progress: int = Field(
        ..., 
        description="Progress percentage (0-100)", 
        ge=0, 
        le=100
    )
    message: str = Field(..., description="Human-readable status message")
    result: Optional[Dict[str, Any]] = Field(
        None, 
        description="Task result data (only present when status is 'completed')"
    )
    error: Optional[str] = Field(
        None, 
        description="Error message (only present when status is 'error')"
    )
    created_at: Optional[float] = Field(
        None, 
        description="Unix timestamp when the task was created"
    )
    updated_at: Optional[float] = Field(
        None, 
        description="Unix timestamp when the task was last updated"
    )
    logs: Optional[List[str]] = Field(
        None,
        description="Log messages from the execution (only present if include_logs=True)"
    )


class ClaudeCodeError(BaseModel):
    """
    Error response model for Claude Code API.
    
    Attributes:
        error: Error message
        error_type: Type of error
        status_code: HTTP status code
    """
    error: str = Field(..., description="Error message")
    error_type: str = Field(..., description="Type of error")
    status_code: int = Field(..., description="HTTP status code")