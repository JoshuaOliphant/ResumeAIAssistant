"""
Pydantic schemas for Claude Code API.

This module provides schemas for the Claude Code customization API,
including task tracking and result schemas.
"""

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ClaudeCodeCustomizeRequest(BaseModel):
    """
    Request model for Claude Code resume customization.
    
    Attributes:
        resume_id: ID of the resume to customize
        job_id: ID of the job to customize for
        user_id: Optional ID of the authenticated user
        resume_content: Full content of the resume
        job_description: Full job description text
    """
    
    resume_id: str = Field(..., description="ID of the resume to customize")
    job_id: str = Field(..., description="ID of the job to customize for")
    user_id: Optional[str] = Field(None, description="Optional user ID")
    resume_content: str = Field(..., description="Resume content")
    job_description: str = Field(..., description="Job description text")


class ClaudeCodeCustomizeResponse(BaseModel):
    """
    Response model for Claude Code customized resume.
    
    Attributes:
        customized_resume: The customized resume content
        customization_summary: Summary of changes and explanations
        customization_id: Optional ID of the stored customization
    """
    
    customized_resume: str = Field(..., description="Customized resume content")
    customization_summary: str = Field(..., description="Summary of changes")
    customization_id: Optional[str] = Field(None, description="ID of customization")


class CustomizeResumeRequest(BaseModel):
    """
    Request model for resume customization.

    Attributes:
        resume_content: Full content of the resume in markdown format
        job_description: Full job description text
        user_id: Optional ID of the authenticated user
    """

    resume_content: str = Field(..., description="Resume content in markdown format")
    job_description: str = Field(..., description="Job description text")
    user_id: Optional[str] = Field(
        None, description="Optional user ID for authenticated users"
    )


class CustomizedResumeResponse(BaseModel):
    """
    Response model for customized resume.

    Attributes:
        customized_resume: The customized resume content
        customization_summary: Summary of changes and explanations
        customization_id: Optional ID of the stored customization
        is_fallback: Whether this was generated by the fallback service
    """

    customized_resume: str = Field(..., description="Customized resume content")
    customization_summary: str = Field(
        ..., description="Summary of changes and explanations"
    )
    customization_id: Optional[str] = Field(
        None, description="ID of the stored customization"
    )
    is_fallback: Optional[bool] = Field(
        None, description="Whether this was generated by the fallback service"
    )


class QueuedTaskResponse(BaseModel):
    """
    Response model for a queued customization task.

    Attributes:
        task_id: Unique identifier for the task
        status: Current status of the task (e.g., "queued", "processing")
    """

    task_id: str = Field(..., description="Unique identifier for tracking the task")
    status: str = Field(..., description="Current status of the task")


class TodoInfo(BaseModel):
    """
    Information about todo items tracked in logs.

    Attributes:
        total: Total number of todo items found
        completed: Number of completed todo items
        completed_items: List of completed todo items
        all_items: List of all todo items
        current_item: Currently active todo item
    """

    total: int = Field(0, description="Total number of todo items")
    completed: int = Field(0, description="Number of completed todo items")
    completed_items: List[str] = Field(
        default_factory=list, description="List of completed todo items"
    )
    all_items: List[str] = Field(
        default_factory=list, description="List of all todo items"
    )
    current_item: Optional[str] = Field(None, description="Currently active todo item")


class LogAnalysis(BaseModel):
    """
    Analysis of log content for key events and progress indicators.

    Attributes:
        has_error: Whether the logs contain errors
        has_todos: Whether the logs contain todo items
        has_output: Whether output files were generated
        has_completion: Whether the task completed successfully
        total_log_count: Total number of log lines
        todo_percent_complete: Percent of todo items completed
        completed_items: List of completed todo items
        current_item: Currently active todo item
    """

    has_error: bool = Field(False, description="Whether the logs contain errors")
    has_todos: bool = Field(False, description="Whether the logs contain todo items")
    has_output: bool = Field(False, description="Whether output files were generated")
    has_completion: bool = Field(
        False, description="Whether the task completed successfully"
    )
    total_log_count: int = Field(0, description="Total number of log lines")
    todo_percent_complete: Optional[int] = Field(
        None, description="Percent of todo items completed"
    )
    completed_items: Optional[List[str]] = Field(
        None, description="List of completed todo items"
    )
    current_item: Optional[str] = Field(None, description="Currently active todo item")


class TaskStatusResponse(BaseModel):
    """
    Response model for task status requests.

    Attributes:
        task_id: Unique identifier for the task
        status: Current status of the task
        message: Human-readable status message
        result: Optional task result data (only present when status is "completed")
        error: Optional error message (only present when status is "error")
        logs: Optional list of log messages (only present if include_logs=True)
    """

    task_id: str = Field(..., description="Unique identifier for the task")
    status: str = Field(
        ..., description="Current status (initializing, in_progress, completed, error)"
    )
    message: str = Field(..., description="Human-readable status message")
    result: Optional[Dict[str, Any]] = Field(
        None, description="Task result data (only present when status is 'completed')"
    )
    error: Optional[str] = Field(
        None, description="Error message (only present when status is 'error')"
    )
    created_at: Optional[float] = Field(
        None, description="Unix timestamp when the task was created"
    )
    updated_at: Optional[float] = Field(
        None, description="Unix timestamp when the task was last updated"
    )
    logs: Optional[List[str]] = Field(
        None,
        description="Log messages from the execution (only present if include_logs=True)",
    )


class ClaudeCodeError(BaseModel):
    """
    Error response model for Claude Code API.

    Attributes:
        error: Error message
        error_type: Type of error
        status_code: HTTP status code
    """

    error: str = Field(..., description="Error message")
    error_type: str = Field(..., description="Type of error")
    status_code: int = Field(..., description="HTTP status code")

