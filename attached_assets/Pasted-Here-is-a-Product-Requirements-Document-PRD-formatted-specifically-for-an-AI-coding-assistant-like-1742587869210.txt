Here is a Product Requirements Document (PRD) formatted specifically for an AI coding assistant like Replit Agent or Vercel v0. This PRD clearly defines what to build, how it should behave, and the expectations for the backend using Python + FastAPI and Anthropic Claude as the LLM. It is intentionally frontend-agnostic to allow flexibility.

‚∏ª

üìÑ Product Requirements Document (PRD)

üß© Project Name

Resume Customization App

‚∏ª

üéØ Objective

Build a web application that helps job seekers tailor their resumes and cover letters to specific job descriptions using AI. The app should assist with editing, analyzing, and customizing resumes with ATS compatibility in mind, and provide AI-generated content to speed up the application process.

‚∏ª

‚öôÔ∏è Stack Requirements
	‚Ä¢	Backend Language: Python 3.10+
	‚Ä¢	Framework: FastAPI
	‚Ä¢	AI Integration: Anthropic Claude API
	‚Ä¢	Frontend: Agnostic (can be rendered via templates, HTMX, or exposed as an API)

‚∏ª

üîß Core Features & Functional Requirements

1. Resume Upload & Management
	‚Ä¢	Endpoint to upload resumes (initially only Markdown, later DOCX and PDF).
	‚Ä¢	Store resume content in a database.
	‚Ä¢	Return a unique resume ID.
	‚Ä¢	Endpoint to retrieve and update resume content.

2. Resume Editing
	‚Ä¢	Endpoint to fetch editable content by resume ID.
	‚Ä¢	Endpoint to update resume content (Markdown format).
	‚Ä¢	Keep version history for each update (basic versioning).

3. Job Description Input
	‚Ä¢	Endpoint to submit a job description:
	‚Ä¢	As raw text
	‚Ä¢	Or via a URL (must scrape content or fallback gracefully)
	‚Ä¢	Return a job description ID after storing it.
	‚Ä¢	Endpoint to fetch job description data.

4. ATS Compatibility Analysis
	‚Ä¢	Endpoint to score a resume against a job description.
	‚Ä¢	Return:
	‚Ä¢	Overall match score (0‚Äì100)
	‚Ä¢	List of matching and missing keywords
	‚Ä¢	Basic improvement suggestions (e.g., add education, quantify results)

5. AI-Powered Resume Customization
	‚Ä¢	Endpoint to trigger resume customization using Claude API.
	‚Ä¢	Inputs:
	‚Ä¢	Resume ID
	‚Ä¢	Job description ID
	‚Ä¢	Output:
	‚Ä¢	Enhanced resume content
	‚Ä¢	Store customized result with new ID

6. Cover Letter Generation
	‚Ä¢	Endpoint to generate a cover letter using Claude API.
	‚Ä¢	Inputs:
	‚Ä¢	Resume ID or customized resume ID
	‚Ä¢	Job description ID
	‚Ä¢	Output:
	‚Ä¢	AI-generated cover letter (editable by user)

7. Export Functionality
	‚Ä¢	Endpoints to download resume or cover letter in:
	‚Ä¢	Markdown
	‚Ä¢	PDF
	‚Ä¢	DOCX
	‚Ä¢	Files should have proper headers for downloading.

‚∏ª

üõ°Ô∏è Non-Functional Requirements
	‚Ä¢	All endpoints must be documented using OpenAPI (via FastAPI auto docs).
	‚Ä¢	Support CORS for external frontend access.
	‚Ä¢	Handle large uploads gracefully (limit to 5MB per file).
	‚Ä¢	Secure API with optional token-based auth (for future phases).
	‚Ä¢	Claude API keys must be loaded from environment variables.

‚∏ª

üß† AI Prompt Guidelines for Claude

Customize resumes using Claude by:
	‚Ä¢	Emphasizing relevant skills already present.
	‚Ä¢	Reordering content for clarity and impact.
	‚Ä¢	Highlighting achievements (especially quantified ones).
	‚Ä¢	Never fabricating experience or adding unverified claims.

‚∏ª

üß™ Initial MVP Workflow
	1.	User uploads a Markdown resume.
	2.	User inputs a job description as plain text.
	3.	The app compares them and returns:
	‚Ä¢	ATS match score
	‚Ä¢	Keyword matches/mismatches
	4.	User requests AI to customize the resume.
	5.	Claude generates a tailored resume based on job description.
	6.	User can also request a generated cover letter.
	7.	User downloads final versions.

‚∏ª

üìò Future Enhancements (out of scope for MVP)
	‚Ä¢	Authentication and user profiles
	‚Ä¢	Real-time collaborative editing
	‚Ä¢	Payment integration and usage tracking
	‚Ä¢	Resume builder UI with drag-and-drop

‚∏ª

‚úÖ Deliverables Checklist for AI Assistant
	‚Ä¢	FastAPI project with /resumes, /jobs, /ats, /customize, and /cover-letter endpoints
	‚Ä¢	Claude integration for customization and cover letter generation
	‚Ä¢	Resume/job description comparison logic
	‚Ä¢	Download routes for PDF, DOCX, and Markdown formats
	‚Ä¢	CORS and OpenAPI documentation enabled

‚∏ª

Let me know if you‚Äôd like a follow-up PRD for frontend or deployment planning.